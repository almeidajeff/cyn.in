<h1 tal:replace="structure here/manage_page_header">Header</h1>
<h2 tal:define="manage_tabs_message options/manage_tabs_message | nothing"
    tal:replace="structure here/manage_tabs">Tabs</h2>

<h3> <code i18n:translate="">Ratings Tool</code> </h3>

<p i18n:translate="">ATRatings is a tool for storing user ratings and hits on objects.</p>

<p i18n:translate="">ATRatings uses a pluggable storage mechanism for rating data.  So far there 
is a ZODB-based storage that strives to be reasonably efficient with 
memory.</p>

<p i18n:translate="">ATRatings makes use of references and hence requires Archetypes.  It indexes
stored ratings using object UIDs, so until UIDs are backported into the CMF,
you can only rate Archetypes-based objects.</p>

<p i18n:translate="">The most useful API methods:</p>

<h4 i18n:translate="">Ratings</h4>

<dl>
<dt>addRating(rating, uid)</dt>
<dd i18n:translate="">Add a rating for the currently authenticated user to the object with the
    given UID.  If a user rates an object twice, the first rating is discarded.</dd>

<dt>getEstimatedRating(uid)</dt>
<dd i18n:translate="">Get an item's rating using a Bayesian estimator.  The Bayesian method
    prevents object ratings from spiking based on a small number of initial
    ratings.  This is the recommended way to get an object's rating.</dd>

<dt>getUserRating(uid)</dt>
<dd i18n:translate="">Get the currently authenticated user's rating for the object with the 
    specified UID.  Returns None if the user has not rated the object.</dd>

<dt>getRatingCount(uid)</dt>
<dd i18n:translate="">Get the total number of ratings for the object with the specified UID.</dd>
    
<dt>getRatingMean(uid)</dt>
<dd i18n:translate="">Get the average rating for the object with the specified UID.  Note that
    getEstimatedRating is the recommended way to get an object's rating.</dd>
    
<dt>getRatingStdDev(uid)</dt>
<dd i18n:translate="">Get the standard deviation of ratings for the object with the specified UID.</dd>

<dt>getTotalRatingCount()</dt>
<dd i18n:translate="">Get the total number of ratings for all content objects combined.</dd>
</dl>

<h4 i18n:translate="">Hit Counting</h4>

<dl>
<dt>addHit(uid)</dt>
<dd i18n:translate="">Increment the hit counter for the object with the specified UID.</dd>

<dt>getHitCount(uid)</dt>
<dd i18n:translate="">Get the number of hits for the object with the specified UID.</dd>

<dt>getTotalHitCount()</dt>
<dd i18n:translate="">Get the total number of hits for all objects being tracked.</dd>

<dt>getHitRate(uid)</dt>
<dd i18n:translate="">Get the current number of hits per week for the current object.  The hit
    rate is tracked using an exponential weighting, so the rate should be up
    to date.  I.e., if your object gets 100 hits per week for a year, then this
    week it suddenly gets 10,000 getHitRate will return something close to 10,000
    hits/week during the week of the spike.</dd>
</dl>

<h1 tal:replace="structure here/manage_page_footer">Footer</h1>
